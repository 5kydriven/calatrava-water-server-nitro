generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("NITRO_DATABASE_URL")
  directUrl = env("NITRO_DIRECT_URL")
}

model Resident {
  id                 String        @id @unique @default(dbgenerated("gen_random_uuid()"))
  accountno          String        @unique
  classtype          String
  fullname           String
  notification_token String?
  book               String
  createdAt          DateTime      @default(now())
  isPlaceholder      Boolean       @default(false)
  announcements      Anouncement[]
  billings           Billing[]
  collections        Collection[]
  concerns           Concern[]
  reminders          Reminder[]
  ledgers            Ledger[]
}

model Billing {
  id             String   @id @unique @default(dbgenerated("gen_random_uuid()"))
  accountno      String
  amortamnt      String
  arrearsamt     String
  arrearsenv     String
  b_status       String
  bill_date      String
  bill_no        String
  billbrgy       String
  billpurok      String
  book           String
  classtype      String
  curreading     String
  custno         String
  discon_date    String
  discount       String
  due_date       String
  due_penalty    String
  fullname       String
  m_penalty      String
  mr_sys_no      String
  mrrfdue        String
  mtr_no         String
  nrwater        String
  paid           String
  paymentReceipt String?
  penalized      String
  prereading     String
  prevused       String
  prevused2      String
  prvbilldate    String
  prvdiscon      String
  prvduedate     String
  purokcode      String
  stubout        String
  totalBill      Float
  verified       String
  waterusage     String
  billamnt       Float
  createdAt      DateTime @default(now())
  environmentFee Float
  paymentDate    String?
  paymentStatus  String?
  resident       Resident @relation(fields: [accountno], references: [accountno])
}

model Collection {
  id            String   @id @unique @default(dbgenerated("gen_random_uuid()"))
  accountno     String
  amortize      String
  arrearsenv    String
  bankgroup     String
  bankid        String
  bankonline    String
  batchno       String
  billno        String
  branch        String
  cash          String
  check         String
  checkdate     String
  checkno       String
  cmrrfamnt     String
  custno        String
  envfee        String
  fullname      String
  onlineref     String
  othrincome    String
  othrreconn    String
  pacyamnt      String
  papyamnt      String
  payarrears    String
  pdiscamnt     String
  penamnt       String
  pmrrfamnt     String
  pymtdate      String
  pymtmethod    String
  receiptno     String
  receiptstatus String
  receipttype   String
  runbalance    String
  sysno         String
  teller        String
  trackdt       String
  waterbill     String
  arrearsamt    String
  createdAt     DateTime @default(now())
  othrapply     String
  resident      Resident @relation(fields: [accountno], references: [accountno])
}

model Ledger {
  id          String    @id @unique @default(dbgenerated("gen_random_uuid()"))
  accountno   String?
  amount      String
  consumption String
  custno      String
  reading     String
  ref_code    String
  ref_no      String
  sequence    String
  tag         String
  timestamp   String
  trans_date  String
  createdAt   DateTime  @default(now())
  Resident    Resident? @relation(fields: [accountno], references: [accountno])
}

model Concern {
  id         String   @id @default(uuid())
  area       String
  content    String
  name       String
  status     String
  accountno  String
  createdAt  DateTime @default(now())
  residentId String
  resident   Resident @relation(fields: [residentId], references: [id])
}

model Reminder {
  id         String   @id @default(uuid())
  content    String
  dueDate    String
  name       String
  createdAt  DateTime @default(now())
  residentId String
  Resident   Resident @relation(fields: [residentId], references: [id])
}

model Anouncement {
  id         String   @id @default(uuid())
  content    String
  dueDate    String
  type       String
  target     String
  createdAt  DateTime @default(now())
  residentId String
  Resident   Resident @relation(fields: [residentId], references: [id])
}

model Faq {
  id        String   @id @default(uuid())
  answer    String
  question  String
  createdAt DateTime @default(now())
}

model Coordinate {
  id        String   @id @default(uuid())
  lat       Float
  lng       Float
  name      String
  createdAt DateTime @default(now())
}
