generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("NITRO_DATABASE_URL")
  directUrl = env("NITRO_DIRECT_URL")
}

model Resident {
  id                 String        @id @default(uuid())
  accountno          String        @unique
  classtype          String
  createdAt          DateTime      @default(now())
  fullname           String
  notification_token String?
  book               String
  billings           Billing[]
  collections        Collection[]
  ledgers            Ledger[]
  concerns           Concern[]
  reminders          Reminder[]
  announcements      Anouncement[]
}

model Billing {
  id             String   @id @default(uuid())
  accountno      String
  amortamnt      String
  arrearsamt     String
  arrearsenv     String
  b_status       String
  bill_date      String
  bill_no        String
  billamnt       Float
  billbrgy       String
  billpurok      String
  book           String
  classtype      String
  createdAt      DateTime @default(now())
  curreading     String
  custno         String
  discon_date    String
  discount       String
  due_date       String
  due_penalty    String
  fullname       String
  m_penalty      String
  mr_sys_no      String
  mrrfdue        String
  mtr_no         String
  nrwater        String
  paid           String
  paymentReceipt String?
  penalized      String
  prereading     String
  prevused       String
  prevused2      String
  prvbilldate    String
  prvdiscon      String
  prvduedate     String
  purokcode      String
  stubout        String
  totalBill      Float
  verified       String
  waterusage     String
  environmentFee Float
  paymentStatus  String?
  paymentDate    String?

  resident    Resident? @relation(fields: [resident_id], references: [id])
  resident_id String?
}

model Collection {
  id            String   @id @default(uuid())
  accountno     String
  amortize      String
  arrearsamt    String
  arrearsenv    String
  bankgroup     String
  bankid        String
  bankonline    String
  batchno       String
  billno        String
  branch        String
  cash          String
  check         String
  checkdate     String
  checkno       String
  cmrrfamnt     String
  createdAt     DateTime @default(now())
  custno        String
  envfee        String
  fullname      String
  onlineref     String
  othrapply     String
  othrincome    String
  othrreconn    String
  pacyamnt      String
  papyamnt      String
  payarrears    String
  pdiscamnt     String
  penamnt       String
  pmrrfamnt     String
  pymtdate      String
  pymtmethod    String
  receiptno     String
  receiptstatus String
  receipttype   String
  runbalance    String
  sysno         String
  teller        String
  trackdt       String
  waterbill     String

  resident    Resident? @relation(fields: [resident_id], references: [id])
  resident_id String?
}

model Ledger {
  id          String   @id @default(uuid())
  accountno   String
  amount      String
  consumption String
  createdAt   DateTime @default(now())
  custno      String
  reading     String
  ref_code    String
  ref_no      String
  sequence    String
  tag         String
  timestamp   String
  trans_date  String

  resident    Resident? @relation(fields: [resident_id], references: [id])
  resident_id String?
}

model Concern {
  id        String   @id @default(uuid())
  area      String
  content   String
  createdAt DateTime @default(now())
  name      String
  status    String

  resident    Resident? @relation(fields: [resident_id], references: [id])
  resident_id String?
}

model Reminder {
  id        String   @id @default(uuid())
  content   String
  dueDate   String
  createdAt DateTime @default(now())
  name      String

  Resident    Resident? @relation(fields: [resident_id], references: [id])
  resident_id String?
}

model Anouncement {
  id        String   @id @default(uuid())
  content   String
  dueDate   String
  type      String
  target    String
  createdAt DateTime @default(now())

  Resident    Resident? @relation(fields: [resident_id], references: [id])
  resident_id String?
}

model faq {
  id        String   @id @default(uuid())
  answer    String
  question  String
  createdAt DateTime @default(now())
}

model Coordinate {
  id        String   @id @default(uuid())
  lat       Float
  lng       Float
  name      String
  createdAt DateTime @default(now())
}
